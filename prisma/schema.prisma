// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * create a prisma schema from the following
 * CREATE TABLE public.categories (
 * id serial primary key,
 * slug CHARACTER VARYING(128) NOT NULL UNIQUE,
 * name CHARACTER VARYING(64) NOT NULL UNIQUE
 * );
 * CREATE TABLE public.questions (
 * id serial primary key,
 * text CHARACTER VARYING(1024) NOT NULL,
 * category_id integer NOT NULL REFERENCES categories(id)
 * );
 * CREATE TABLE public.answers (
 * id serial primary key,
 * text CHARACTER VARYING(1024) NOT NULL,
 * question_id integer NOT NULL REFERENCES questions(id),
 * correct BOOLEAN DEFAULT false
 * );
 */

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  admin       Boolean   @default(false)
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  articles    Article[]
  comments    Comment[]
}


model Article {
  id          Int        @id @default(autoincrement())
  articlename String
  content     String
  img         String?    // Cloudinary image URL
  date        DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  Int?
  comments    Comment[]
  tags        ArticleTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String
  date      DateTime @default(now())
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  articles    Article[]
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  articles ArticleTag[]
}

model ArticleTag {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@id([articleId, tagId])
}